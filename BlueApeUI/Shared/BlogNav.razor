@inject NavigationManager _navMan

<div class=@("topBar"+classUnique)>
    <div class=@("leftSide"+classUnique)>
        <div class=@("logo"+classUnique)>
            <img src=@model.logoUrl height=@(scale*17) />
        </div>
        @for (int j = 0; j < model.pages.Count() && j <= 7; j++)
        {
            <div class=@("pageLink"+classUnique)>
                <a href=@($"/page-editor/{model.title}/{model.pages[j]}")>
                    @model.pages[j]
                </a>
            </div>
        }
    </div>

    <div class=@("rightSide"+classUnique)>
        <div class=@("iconBox"+classUnique)>
            <img src="./Assets/Icons/instagram.svg"
                 height=@(scale*17)
                 width=@(scale*7) />
        </div>
        <div class=@("iconBox"+classUnique)>
            <img src="./Assets/Icons/twitter.svg"
                 height=@(scale*17)
                 width=@(scale*7) />
        </div>
        <div class=@("iconBox"+classUnique)>
            <img src="./Assets/Icons/facebook-app-symbol.svg"
                 height=@(scale*17)
                 width=@(scale*7) />
        </div>
    </div>
</div>
<div class=@("bottomBar"+classUnique)>
    <div class=@("title"+classUnique)>
        @model.title
    </div>
    <div class=@("categoryContainer"+classUnique)>
        @for (int i = 0; i < model.categories.Count() && i <= 7; i++)
        {
            <div class=@("catBox"+classUnique)>
                <span>@model.categories[i]</span>
            </div>
        }
    </div>
</div>

@if (!showTitle)
{
<style>
        .title@(classUnique) {
            display: none !important;
        }

        .categoryContainer@(classUnique) {
            top: 0 !important;
        }
</style>
}

<style>
      .topBar@(classUnique) {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: @(Convert.ToString(scale*17)+"px");
        background-color: @model.backgroundColor;
        display: flex;
        flex-direction: row;
        border-bottom: 1px solid #e8e8e8;
    }
    .bottomBar@(classUnique) {
        height: @(Convert.ToString(scale*60)+"px");
        width: 100%;
        position: absolute;
        top: @(Convert.ToString(scale*17)+"px");
        left: 0;
        background: linear-gradient(0deg, rgba(0,0,0,0) 0%, @model.backgroundColor 99%);
    }
    .categoryContainer@(classUnique) {
        position: absolute;
        top: @(Convert.ToString(scale * 37)+"px");
        left: 0;
        width: 100%;
        height: @(Convert.ToString(scale * 25)+"px");
        text-align: center;
        display: flex;
        flex-direction: row;
        align-items: center;
        justify-content: center;
    }
    .catBox@(classUnique) {
        margin: 0 @(Convert.ToString(scale * 5)+"px");
        font-size: @(Convert.ToString(scale * 6)+"px");
        font-weight: 700;
        color: @model.secondaryColor;
        cursor: pointer;
    }
    .catBox:hover@(classUnique) {
        color: @model.primaryColor;
    }
    .title@(classUnique) {
        position: absolute;
        top: @(Convert.ToString(scale * 15)+"px");
        width: 100%;
        color: @model.secondaryColor;
        font-family: 'Dancing Script', cursive;
        font-size: @(Convert.ToString(scale * 16)+"px");
        text-align: center;
        cursor: default;
        font-weight: 900;
    }
    .leftSide@(classUnique) {
        width: calc(100% - @(Convert.ToString(scale * 37)+"px"));
        display: flex;
        flex-direction: row;
    }
    .rightSide@(classUnique) {
        width: @(Convert.ToString(scale * 37)+"px");
        display: flex;
        flex-direction: row;
    }
    .logo@(classUnique) {
        width: auto;
        height: @(Convert.ToString(scale * 17)+"px");
        cursor: pointer;
    }
    .logo@(classUnique):hover {
        background: rgb(168,168,168);
        background: @model.secondaryColor;

    }
    .pageLink@(classUnique) {
        font-size: @(Convert.ToString(scale * 5)+"px");
        font-weight: 700;
        line-height: @(Convert.ToString(scale * 17)+"px");
        text-align: center;
        padding-right: @(Convert.ToString(scale * 2)+"px");
        padding-left: @(Convert.ToString(scale * 2)+"px");
        cursor: pointer;
        color: white;
    }
    .pageLink@(classUnique):hover {
        background: rgb(168,168,168);
        background: @model.secondaryColor;
    }
    .customA@(classUnique) {
        color: #fff;
        text-decoration: none;
    }
    .customA@(classUnique):hover {
        background: rgb(168,168,168);
        background: @model.secondaryColor;
    }
    .iconBox@(classUnique) {
        position: relative;
        width: @(Convert.ToString(scale * 12)+"px");
        color: white;
        cursor: pointer;
    }
    .iconBox@(classUnique):hover {
        background: rgb(168,168,168);
        background: @model.secondaryColor;
    }
    .iconBox@(classUnique) > img {
       left: @(Convert.ToString(scale * 2)+"px");
        position: absolute;
    }
    a, a:hover {
        color: white;
        text-decoration: none;
    }
</style>

@code {
    [Parameter]
    public BlogSettings model { get; set; }
    [Parameter]
    public int scale { get; set; }
    [Parameter]
    public bool activeButtons { get; set; }
    [Parameter]
    public bool showTitle { get; set; }

    protected string classUnique = PasswordUtilities.CreatePassword(6);

    protected void NavigateToPage(string pageName)
    {
        if (activeButtons)
            _navMan.NavigateTo($"/page-editor/{model.title}/{pageName}");
        else return;
    }
}
