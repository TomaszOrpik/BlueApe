<div class=@("containerBody"+uniqueClass)>
    @for (int p = 0; p < _posts.Count(); p++)
    {
        if (_isActive)
        {
            <div class=@("bodySquare"+uniqueClass)>
                <div class=@($"squareBase{uniqueClass} normalCursor{uniqueClass} row")>
                    <div class="left col-6">
                        <a href=@($"/post-editor/{_title}/{_posts[p].Title}")>
                            <img style="width: 100%" src="@_posts[p].ImageUrl" />
                        </a>
                    </div>
                    <div class="right col-6">
                        <a class=@("blackFont"+uniqueClass) href=@($"/post-editor/{_title}/{_posts[p].Title}")>
                            <p class=@("bigString"+uniqueClass)>@_posts[p].Title</p>
                        </a>
                        <p class=@("postSpan"+uniqueClass)>@_posts[p].Intro</p>
                        <p class=@("smallString"+uniqueClass)>Posted @_posts[p].Date</p>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class=@("bodySquare"+uniqueClass)>
                <div class=@($"squareBase{uniqueClass} normalCursor{uniqueClass} row")>
                    <div class="left col-6">
                            <img style="width: 100%" src="@_posts[p].ImageUrl" />
                    </div>
                    <div class="right col-6">
                        <p class=@("bigString"+uniqueClass)>@_posts[p].Title</p>
                        <p class=@("postSpan"+uniqueClass)>@_posts[p].Intro</p>
                        <p class=@("smallString"+uniqueClass)>Posted @_posts[p].Date</p>
                    </div>
                </div>
            </div>
        }


    }
</div>

<style>
    .bigString@(uniqueClass) {
        font-size: @((_scale*10).ToString()+"px !important");
        margin-bottom: 0;
    }
    .postSpan@(uniqueClass) {
        font-size: @((_scale*7).ToString()+ "px !important");
        margin-bottom: 0;
    }
    .smallString@(uniqueClass) {
        font-size: @((_scale*6).ToString()+ "px !important");
    }
    .containerBody@(uniqueClass) {
        width: 100%;
    }

    .bodySquare@(uniqueClass) {
        width: 75%;
        height: @((_scale*75).ToString()+"px");
    }

    .squareBase@(uniqueClass) {
        width: 125%;
        height: 250px;
    }
    .normalCursor@(uniqueClass) {
        cursor: default !important;
    }
    .blackFont@(uniqueClass), .blackFont@(uniqueClass):hover {
        color: black;
        font-weight: 700;
    }
</style>

@code {
    [Parameter]
    public PageData[] posts { get; set; }
    [Parameter]
    public bool isActive { get; set; }
    [Parameter]
    public string title { get; set; }
    [Parameter]
    public int scale { get; set; }

    private string uniqueClass = PasswordUtilities.CreatePassword(6);

    private List<PageData> _posts = new List<PageData>();
    private bool _isActive = false;
    private string _title = "title";
    private int _scale = 1;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if (posts != null && posts.Length > 0) _posts = posts.ToList();
        _isActive = isActive;
        if (title != null) _title = title;
        if (scale != 0) _scale = scale;
    }
}
