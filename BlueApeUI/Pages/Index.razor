@page "/"

@inject NavigationManager _navMan
@inject IBlogsManagerRepository _blogsRepo

@using Newtonsoft.Json;

@attribute [Authorize]

<UserStatus></UserStatus>

<div class="container">
    <div class="row">
        <div class="bodySquare" @onclick="NavigateToNewEditor">
            <div class="square">
                <div class="plusIcon">
                </div>
            </div>
            <div class="addText">
                CREATE NEW BLOG
            </div>
        </div>
        @foreach (KeyValuePair<BlogSettings, PageData[]> blog in blogs)
        {
    <div class="bodySquare blogWindow" @onclick="args => NavigateToExistingPageEditor(blog.Key.title)">
            <div>
                <BlogNav model="@blog.Key" scale="1" activeButtons="@false" showTitle="@true"></BlogNav>
            </div>
            <div class="customContainer">
                <BlogPosts posts="@blog.Value" scale="1" isActive="@false" title="@blog.Key.title"></BlogPosts>
            </div>
            <BlogFooter scale="1"></BlogFooter>
        </div>
        }
    </div>
</div>

<style>
    .logoutBtn {
        top: 10px !important;
    }
    .container {
        margin-top: 10vh;
    }

    .bodySquare {
        margin: 20px;
        width: 250px;
        height: 300px;
    }

    .square {
        width: 250px;
        height: 250px;
        border: 2px dashed black;
        background-color: dodgerblue;
        cursor: pointer;
    }

        .square:hover {
            background-color: #61affe;
        }

    .plusIcon {
        width: 64px;
        height: 64px;
        margin: auto;
        margin-top: 80px;
        background: url("./Assets/Icons/iconfinder_plus_172525.png") no-repeat;
    }

    .addText {
        Margin: 10px 0;
        line-height: 30px;
        text-align: center;
        font-weight: 700;
    }
    .customContainer {
        width: 100%;
        height: 85vh;
        overflow-y: hidden;
        padding-top: 90px;
        padding-left: 60px;
    }
    .bodySquare.blogWindow {
        margin-left: 50px;
        width: 200px;
        position: relative;
        height: 300px;
        overflow: hidden;
    }
</style>

@code {

    [CascadingParameter]
    public Task<AuthenticationState> authenticationStateTask { get; set; }

    private Dictionary<BlogSettings, PageData[]> blogs = new Dictionary<BlogSettings, PageData[]>();

    private void NavigateToNewEditor()
    {
        _navMan.NavigateTo($"/blog-designer");
    }
    private void NavigateToExistingPageEditor(string name)
    {
        Console.WriteLine(name);
        _navMan.NavigateTo($"/blog-editor/all/{name}");
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();
        var authenticationState = await authenticationStateTask;
        string userName = authenticationState.User.Identity.Name;
        var response = await _blogsRepo.getUserBlogs(userName);
        if (response.isSuccess)
        {
            UserBlogsResponse blogsResponse = JsonConvert.DeserializeObject<UserBlogsResponse>(response.content);
            string[] blogs = blogsResponse.blogNames;
            foreach(string blog in blogs)
            {
                var blogResult = await _blogsRepo.getBlogData(blog);
                if (blogResult.isSuccess)
                {

                    BlogData data = JsonConvert.DeserializeObject<BlogData>(blogResult.content);
                    PageData[] posts = data.BlogDocument.Posts;
                    List<string> pageTitles = new List<string>();
                    foreach (PageData page in data.BlogDocument.Pages)
                        pageTitles.Add(page.Title);
                    BlogSettings settings = new BlogSettings(
                        data.BlogDocument.BlogDetails.Title,
                        data.BlogDocument.BlogDetails.LogoUrl,
                        data.BlogDocument.BlogDetails.Description,
                        data.BlogDocument.BlogDetails.PrimaryColor,
                        data.BlogDocument.BlogDetails.SecondaryColor,
                        data.BlogDocument.BlogDetails.BackgroundColor,
                        data.BlogDocument.Categories.ToList(),
                        pageTitles,
                        data.BlogDocument.BlogDetails.FacebookLink,
                        data.BlogDocument.BlogDetails.InstagramLink,
                        data.BlogDocument.BlogDetails.TwitterLink
                    );
                    this.blogs.Add(settings, posts);
                }
            }
        }
    }
}
