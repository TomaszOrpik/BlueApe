@page "/blog-editor"
@page "/blog-editor/{category}/{title}"
@page "/blog-editor/{category}/{title}/{page}"

@inject IBlogsManagerRepository _blogsRepo
@inject NavigationManager _navMan

@using Newtonsoft.Json;

@attribute [Authorize]

<div class="navigation">
    <NavMenu Title="@title" />
</div>

<div class="moveRight">
    <BlogNav model="@blogModel" scale="2" activeButtons="@true"></BlogNav>
</div>
<div class="container">
    <div class="bodySquare" @onclick="OpenNewPostPage">
        <div class="squareBase square">
            <div class="addText">
                CREATE NEW POST
            </div>
        </div>
    </div>
    <BlogPosts posts="@displayedPosts" isActive="@true" title="@title" scale="2"></BlogPosts>
    <div class="row">

            @for (int x = 0; x <= subPages; x++)
            {
                <div class="pageCount" @onclick="args => GoToPage(x)">@x</div>
            }
        
    </div>

</div>
<div class="moveRight">
    <BlogFooter></BlogFooter>
</div>

<style>
    .container {
        margin-top: 160px;
    }

    .bodySquare {
        width: 75%;
        height: 300px;
    }

    .squareBase {
        width: 125%;
        height: 250px;
        cursor: pointer;
    }

    .square {
        border: 2px dashed black;
        background-color: #b3e5fc;
    }

        .square:hover {
            background-color: #4fc3f7;
        }

    .addText {
        Margin: 100px 0;
        line-height: 30px;
        text-align: center;
        font-weight: 700;
        font-size: 36px;
    }
    .pageCount {
        width: 50px;
        height: 50px;
        border: 1px dashed black;
        margin-bottom: 25px;
        margin-right: 25px;
        line-height: 50px;
        text-align: center;
        font-weight: 900;
        font-size: 26px;
        cursor: pointer;
    }

    .moveRight {
        position: absolute;
        top: 0;
        left: 60px;
        width: calc(100% - 60px);
    }
</style>

@code {
    [Parameter]
    public string title { get; set; }
    [Parameter]
    public int page { get; set; }
    [Parameter]
    public string category { get; set; }

    private string _category = "all";

    private BlogSettings blogModel = new BlogSettings("", "", "", "", "", "",
        new List<string>
    (), new List<string>
        (), "", "", "");
    private int _currentPage = 0;

    private PageData[] posts = Array.Empty<PageData>();
    private PageData[] displayedPosts = Array.Empty<PageData>();
    private int subPages = 0;
    ///passed page name to LookForPost
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        if (this.page != 0) _currentPage = this.page;
        else _currentPage = 0;
        if (!String.IsNullOrEmpty(category)) _category = category;
        if (!String.IsNullOrEmpty(title))
        {
            var result = await _blogsRepo.getBlogData(title);
            if (result.isSuccess)
            {
                BlogData blogData = JsonConvert.DeserializeObject<BlogData>
                    (result.content);
                List<string>
                    currentPages = new List<string>
                        ();
                foreach (PageData page in blogData.BlogDocument.Pages) currentPages.Add(page.Title);
                blogModel = new BlogSettings
                (
                blogData.BlogDocument.BlogDetails.Title,
                blogData.BlogDocument.BlogDetails.LogoUrl,
                blogData.BlogDocument.BlogDetails.Description,
                blogData.BlogDocument.BlogDetails.PrimaryColor,
                blogData.BlogDocument.BlogDetails.SecondaryColor,
                blogData.BlogDocument.BlogDetails.BackgroundColor,
                blogData.BlogDocument.Categories.ToList(),
                currentPages.ToList(),
                blogData.BlogDocument.BlogDetails.FacebookLink,
                blogData.BlogDocument.BlogDetails.InstagramLink,
                blogData.BlogDocument.BlogDetails.TwitterLink
                );
                BlogData body = JsonConvert.DeserializeObject<BlogData>
                    (result.content);
                Console.WriteLine(blogModel.title);
                posts = body.BlogDocument.Posts;
                int numberOfPosts = body.BlogDocument.Posts.Length;
                if (numberOfPosts > 9) subPages = Convert.ToInt32(numberOfPosts.ToString().Remove(numberOfPosts.ToString().Length - 1));
            }
        }
        this.RerenderPosts();
    }
    protected void GoToPage(int pageNum)
    {
        _currentPage = pageNum;
        this.RerenderPosts();
        _currentPage = 0;
        Console.WriteLine(_currentPage);
    }
    protected void OpenNewPostPage()
    {
        _navMan.NavigateTo($"/post-editor/{title}");
    }
    private void RerenderPosts()
    {
        int startIndex = _currentPage != 0 ? Convert.ToInt32(Convert.ToString(_currentPage - 1) + "0") : 0;
        int endIndex = _currentPage != 0 ? Convert.ToInt32(Convert.ToString(_currentPage) + "0") : 10;
        this.displayedPosts = Array.Empty<PageData>();
        List<PageData> listPosts = posts.ToList();
        List<PageData> newDisplayedPosts = new List<PageData>();
        listPosts.ForEach(x =>
        {
            int index = listPosts.IndexOf(x);
            if (index >= startIndex && index < endIndex) newDisplayedPosts.Add(x);
        });
        newDisplayedPosts.Reverse();
        this.displayedPosts = newDisplayedPosts.ToArray();
    }
}
